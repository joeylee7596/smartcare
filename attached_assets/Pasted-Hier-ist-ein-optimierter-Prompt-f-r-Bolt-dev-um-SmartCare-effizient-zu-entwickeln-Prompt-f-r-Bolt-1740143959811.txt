Hier ist ein optimierter Prompt f√ºr Bolt.dev, um SmartCare effizient zu entwickeln:

Prompt f√ºr Bolt.dev: Entwicklung von SmartCare

Erstelle eine vollst√§ndige Web-App namens ‚ÄúSmartCare‚Äù f√ºr ambulante Pflegedienste und kleine Altenheime, die eine intuitive und moderne Benutzeroberfl√§che f√ºr Pflegekr√§fte bietet.
Die Anwendung muss eine einfache, mobile-optimierte UX mit klaren, strukturierten Funktionen bieten.
Nutze React (Next.js) mit Tailwind CSS f√ºr das Frontend und Node.js (NestJS) mit PostgreSQL f√ºr das Backend.

1. Anforderungen an das UI/UX

Erstelle ein benutzerfreundliches Dashboard mit:
	‚Ä¢	Links: Seitenleiste mit folgenden Men√ºpunkten:
	‚Ä¢	Dashboard (Home)
	‚Ä¢	Patienten
	‚Ä¢	Planung
	‚Ä¢	Dokumentation
	‚Ä¢	Abrechnung
	‚Ä¢	Einstellungen
	‚Ä¢	Button ‚ÄûEinklappen‚Äú, um die Sidebar zu minimieren.
	‚Ä¢	Oben rechts: Nutzerprofil (Dropdown mit Einstellungen & Logout) und Benachrichtigungs-Icon.
	‚Ä¢	Hauptbereich des Dashboards:
	‚Ä¢	Begr√º√üungstext mit Benutzername & Tages√ºbersicht.
	‚Ä¢	Kacheln mit Schnellzugriffen:
	‚Ä¢	Patientenliste (X Patienten heute)
	‚Ä¢	Touren√ºbersicht (N√§chster Besuch um X Uhr)
	‚Ä¢	Offene Aufgaben (X zu erledigende Aufgaben)
	‚Ä¢	Ausstehende Dokumentation (X Berichte fehlen)

2. Patientenverwaltung
	‚Ä¢	Patienten√ºbersicht (Tabelle mit Filter & Suche)
	‚Ä¢	Spalten: Name | Pflegegrad | Medikation | N√§chster Besuch
	‚Ä¢	Klick √∂ffnet Detailansicht mit:
	‚Ä¢	Stammdaten & Notfallkontakte
	‚Ä¢	Medikationsplan mit Erinnerungen
	‚Ä¢	Letzte Pflegeeintr√§ge & Notizen
	‚Ä¢	Wunschmanagement-Feld (Patientenw√ºnsche erfassen)

3. Tourenplanung & Dienstplanung
	‚Ä¢	Kalenderansicht f√ºr Tages-/Wochenplanung
	‚Ä¢	Pflegekr√§fte sehen geplante Besuche
	‚Ä¢	Google Maps API f√ºr automatische Tourenoptimierung
	‚Ä¢	√Ñnderungen an Schichten in Echtzeit synchronisiert

4. Dokumentation & KI-gest√ºtzte Spracherfassung
	‚Ä¢	Pflegekr√§fte erfassen Notizen per Sprache (automatisch strukturiert)
	‚Ä¢	Dokumentation mit vorgefertigten Dropdowns & Checkboxen
	‚Ä¢	Automatische Pr√ºfung auf fehlende Eintr√§ge

5. Abrechnung & Schnittstellen
	‚Ä¢	Automatische Rechnungsstellung basierend auf erbrachten Leistungen
	‚Ä¢	Anbindung an Krankenkassen f√ºr direkte Abrechnung
	‚Ä¢	Statusverwaltung: Offene, bezahlte & √ºberf√§llige Rechnungen
	‚Ä¢	Automatische Erinnerung an fehlende Abrechnungen

6. Automatisierte Erinnerungen & Echtzeit-Benachrichtigungen
	‚Ä¢	Push-Benachrichtigungen f√ºr:
	‚Ä¢	Vergessene Dokumentation
	‚Ä¢	Medikamentengabe
	‚Ä¢	Schicht√§nderungen
	‚Ä¢	Kritische Warnmeldungen (z. B. falsche Medikation erkannt)

7. Offline-Modus & DSGVO-Konformit√§t
	‚Ä¢	App funktioniert auch offline ‚Äì synchronisiert Daten sp√§ter
	‚Ä¢	DSGVO-konforme Benutzerrechte & Rollensystem

Technologie-Stack
	‚Ä¢	Frontend: React (Next.js) mit Tailwind CSS
	‚Ä¢	Backend: Node.js (NestJS) mit PostgreSQL
	‚Ä¢	Auth & Sicherheit: OAuth2 mit DSGVO-konformen Rollenrechten
	‚Ä¢	Realtime & Kommunikation: WebSockets f√ºr Live-Benachrichtigungen
	‚Ä¢	Cloud-Speicherung: AWS S3 f√ºr Dokumente & Firebase f√ºr Echtzeitdaten
	‚Ä¢	Offline-Support: IndexedDB zur tempor√§ren Datenspeicherung

Wichtige Entwicklungsanforderungen:
	‚Ä¢	Minimaler Klickaufwand: Alle Kernfunktionen maximal 2 Klicks entfernt.
	‚Ä¢	Mobile-First-Design: Perfekte Nutzung auf Tablets & Smartphones.
	‚Ä¢	Super einfache Bedienung: F√ºr nicht technikaffine Pflegekr√§fte.
	‚Ä¢	Extrem schnelle Performance & Echtzeit-Synchronisierung.

Dieser Prompt gibt Bolt.dev eine klare, vollst√§ndige Struktur, um SmartCare effizient und optimal zu entwickeln. Lass mich wissen, falls du Anpassungen brauchst! üöÄ